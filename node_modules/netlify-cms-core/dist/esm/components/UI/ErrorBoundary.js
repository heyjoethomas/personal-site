"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _truncate2 = _interopRequireDefault(require("lodash/truncate"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _reactPolyglot = require("react-polyglot");

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _copyTextToClipboard = _interopRequireDefault(require("copy-text-to-clipboard"));

var _netlifyCmsLibUtil = require("netlify-cms-lib-util");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ISSUE_URL = 'https://github.com/netlify/netlify-cms/issues/new?';

const getIssueTemplate = ({
  version,
  provider,
  browser,
  config
}) => "\n**Describe the bug**\n\n**To Reproduce**\n\n**Expected behavior**\n\n**Screenshots**\n\n**Applicable Versions:**\n - Netlify CMS version: `".concat(version, "`\n - Git provider: `").concat(provider, "`\n - Browser version: `").concat(browser, "`\n\n**CMS configuration**\n```\n").concat(config, "\n```\n\n**Additional context**\n");

const buildIssueTemplate = ({
  config
}) => {
  let version = '';

  if (typeof NETLIFY_CMS_VERSION === 'string') {
    version = "netlify-cms@".concat(NETLIFY_CMS_VERSION);
  } else if (typeof "2.12.3" === 'string') {
    version = "netlify-cms-app@".concat("2.12.3");
  }

  const template = getIssueTemplate({
    version,
    provider: config.getIn(['backend', 'name']),
    browser: navigator.userAgent,
    config: _jsYaml.default.safeDump(config.toJS())
  });
  return template;
};

const buildIssueUrl = ({
  title,
  config
}) => {
  try {
    const body = buildIssueTemplate({
      config
    });
    const params = new URLSearchParams();
    params.append('title', (0, _truncate2.default)(title, {
      length: 100
    }));
    params.append('body', (0, _truncate2.default)(body, {
      length: 4000,
      omission: '\n...'
    }));
    params.append('labels', 'type: bug');
    return "".concat(ISSUE_URL).concat(params.toString());
  } catch (e) {
    console.log(e);
    return "".concat(ISSUE_URL, "template=bug_report.md");
  }
};

const ErrorBoundaryContainer = (0, _styledBase.default)("div", {
  target: "e177kfaq0",
  label: "ErrorBoundaryContainer"
})("padding:40px;h1{font-size:28px;color:", _netlifyCmsUiDefault.colors.text, ";}h2{font-size:20px;}strong{color:", _netlifyCmsUiDefault.colors.textLead, ";font-weight:500;}hr{width:200px;margin:30px 0;border:0;height:1px;background-color:", _netlifyCmsUiDefault.colors.text, ";}a{color:", _netlifyCmsUiDefault.colors.active, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUV5QyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHlhbWwgZnJvbSAnanMteWFtbCc7XG5pbXBvcnQgeyB0cnVuY2F0ZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY29weVRvQ2xpcGJvYXJkIGZyb20gJ2NvcHktdGV4dC10by1jbGlwYm9hcmQnO1xuaW1wb3J0IHsgbG9jYWxGb3JhZ2UgfSBmcm9tICduZXRsaWZ5LWNtcy1saWItdXRpbCc7XG5pbXBvcnQgeyBidXR0b25zLCBjb2xvcnMgfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgSVNTVUVfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uZXRsaWZ5L25ldGxpZnktY21zL2lzc3Vlcy9uZXc/JztcbmNvbnN0IGdldElzc3VlVGVtcGxhdGUgPSAoeyB2ZXJzaW9uLCBwcm92aWRlciwgYnJvd3NlciwgY29uZmlnIH0pID0+IGBcbioqRGVzY3JpYmUgdGhlIGJ1ZyoqXG5cbioqVG8gUmVwcm9kdWNlKipcblxuKipFeHBlY3RlZCBiZWhhdmlvcioqXG5cbioqU2NyZWVuc2hvdHMqKlxuXG4qKkFwcGxpY2FibGUgVmVyc2lvbnM6KipcbiAtIE5ldGxpZnkgQ01TIHZlcnNpb246IFxcYCR7dmVyc2lvbn1cXGBcbiAtIEdpdCBwcm92aWRlcjogXFxgJHtwcm92aWRlcn1cXGBcbiAtIEJyb3dzZXIgdmVyc2lvbjogXFxgJHticm93c2VyfVxcYFxuXG4qKkNNUyBjb25maWd1cmF0aW9uKipcblxcYFxcYFxcYFxuJHtjb25maWd9XG5cXGBcXGBcXGBcblxuKipBZGRpdGlvbmFsIGNvbnRleHQqKlxuYDtcblxuY29uc3QgYnVpbGRJc3N1ZVRlbXBsYXRlID0gKHsgY29uZmlnIH0pID0+IHtcbiAgbGV0IHZlcnNpb24gPSAnJztcbiAgaWYgKHR5cGVvZiBORVRMSUZZX0NNU19WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgbmV0bGlmeS1jbXNAJHtORVRMSUZZX0NNU19WRVJTSU9OfWA7XG4gIH0gZWxzZSBpZiAodHlwZW9mIE5FVExJRllfQ01TX0FQUF9WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgbmV0bGlmeS1jbXMtYXBwQCR7TkVUTElGWV9DTVNfQVBQX1ZFUlNJT059YDtcbiAgfVxuICBjb25zdCB0ZW1wbGF0ZSA9IGdldElzc3VlVGVtcGxhdGUoe1xuICAgIHZlcnNpb24sXG4gICAgcHJvdmlkZXI6IGNvbmZpZy5nZXRJbihbJ2JhY2tlbmQnLCAnbmFtZSddKSxcbiAgICBicm93c2VyOiBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgIGNvbmZpZzogeWFtbC5zYWZlRHVtcChjb25maWcudG9KUygpKSxcbiAgfSk7XG5cbiAgcmV0dXJuIHRlbXBsYXRlO1xufTtcblxuY29uc3QgYnVpbGRJc3N1ZVVybCA9ICh7IHRpdGxlLCBjb25maWcgfSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBidWlsZElzc3VlVGVtcGxhdGUoeyBjb25maWcgfSk7XG5cbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgcGFyYW1zLmFwcGVuZCgndGl0bGUnLCB0cnVuY2F0ZSh0aXRsZSwgeyBsZW5ndGg6IDEwMCB9KSk7XG4gICAgcGFyYW1zLmFwcGVuZCgnYm9keScsIHRydW5jYXRlKGJvZHksIHsgbGVuZ3RoOiA0MDAwLCBvbWlzc2lvbjogJ1xcbi4uLicgfSkpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ2xhYmVscycsICd0eXBlOiBidWcnKTtcblxuICAgIHJldHVybiBgJHtJU1NVRV9VUkx9JHtwYXJhbXMudG9TdHJpbmcoKX1gO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSk7XG4gICAgcmV0dXJuIGAke0lTU1VFX1VSTH10ZW1wbGF0ZT1idWdfcmVwb3J0Lm1kYDtcbiAgfVxufTtcblxuY29uc3QgRXJyb3JCb3VuZGFyeUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDQwcHg7XG5cbiAgaDEge1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBoMiB7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICB9XG5cbiAgc3Ryb25nIHtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIH1cblxuICBociB7XG4gICAgd2lkdGg6IDIwMHB4O1xuICAgIG1hcmdpbjogMzBweCAwO1xuICAgIGJvcmRlcjogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuXG4gIGEge1xuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICB9XG5gO1xuXG5jb25zdCBQcml2YWN5V2FybmluZyA9IHN0eWxlZC5zcGFuYFxuICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG5gO1xuXG5jb25zdCBDb3B5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7YnV0dG9ucy5kZWZhdWx0fTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luOiAxMnB4IDA7XG5gO1xuXG5jb25zdCBSZWNvdmVyZWRFbnRyeSA9ICh7IGVudHJ5LCB0IH0pID0+IHtcbiAgY29uc29sZS5sb2coZW50cnkpO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aHIgLz5cbiAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5oZWFkaW5nJyl9PC9oMj5cbiAgICAgIDxzdHJvbmc+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkud2FybmluZycpfTwvc3Ryb25nPlxuICAgICAgPENvcHlCdXR0b24gb25DbGljaz17KCkgPT4gY29weVRvQ2xpcGJvYXJkKGVudHJ5KX0+XG4gICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5LmNvcHlCdXR0b25MYWJlbCcpfVxuICAgICAgPC9Db3B5QnV0dG9uPlxuICAgICAgPHByZT5cbiAgICAgICAgPGNvZGU+e2VudHJ5fTwvY29kZT5cbiAgICAgIDwvcHJlPlxuICAgIDwvPlxuICApO1xufTtcblxuY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY29uZmlnOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgaGFzRXJyb3I6IGZhbHNlLFxuICAgIGVycm9yTWVzc2FnZTogJycsXG4gICAgYmFja3VwOiAnJyxcbiAgfTtcblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgcmV0dXJuIHsgaGFzRXJyb3I6IHRydWUsIGVycm9yTWVzc2FnZTogZXJyb3IudG9TdHJpbmcoKSB9O1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0JhY2t1cCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UgIT09IG5leHRTdGF0ZS5lcnJvck1lc3NhZ2UgfHwgdGhpcy5zdGF0ZS5iYWNrdXAgIT09IG5leHRTdGF0ZS5iYWNrdXBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dCYWNrdXApIHtcbiAgICAgIGNvbnN0IGJhY2t1cCA9IGF3YWl0IGxvY2FsRm9yYWdlLmdldEl0ZW0oJ2JhY2t1cCcpO1xuICAgICAgYmFja3VwICYmIGNvbnNvbGUubG9nKGJhY2t1cCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYmFja3VwIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGhhc0Vycm9yLCBlcnJvck1lc3NhZ2UsIGJhY2t1cCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHNob3dCYWNrdXAsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFoYXNFcnJvcikge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JCb3VuZGFyeUNvbnRhaW5lcj5cbiAgICAgICAgPGgxPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnRpdGxlJyl9PC9oMT5cbiAgICAgICAgPHA+XG4gICAgICAgICAgPHNwYW4+e3QoJ3VpLmVycm9yQm91bmRhcnkuZGV0YWlscycpfTwvc3Bhbj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj17YnVpbGRJc3N1ZVVybCh7IHRpdGxlOiBlcnJvck1lc3NhZ2UsIGNvbmZpZzogdGhpcy5wcm9wcy5jb25maWcgfSl9XG4gICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAge3QoJ3VpLmVycm9yQm91bmRhcnkucmVwb3J0SXQnKX1cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAge3QoJ3VpLmVycm9yQm91bmRhcnkucHJpdmFjeVdhcm5pbmcnKVxuICAgICAgICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgICAgICAgLm1hcCgoaXRlbSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8UHJpdmFjeVdhcm5pbmcga2V5PXtpbmRleH0+e2l0ZW19PC9Qcml2YWN5V2FybmluZz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgPC9wPlxuICAgICAgICA8aHIgLz5cbiAgICAgICAgPGgyPnt0KCd1aS5lcnJvckJvdW5kYXJ5LmRldGFpbHNIZWFkaW5nJyl9PC9oMj5cbiAgICAgICAgPHA+e2Vycm9yTWVzc2FnZX08L3A+XG4gICAgICAgIHtiYWNrdXAgJiYgc2hvd0JhY2t1cCAmJiA8UmVjb3ZlcmVkRW50cnkgZW50cnk9e2JhY2t1cH0gdD17dH0gLz59XG4gICAgICA8L0Vycm9yQm91bmRhcnlDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShFcnJvckJvdW5kYXJ5KTtcbiJdfQ== */"));
const PrivacyWarning = (0, _styledBase.default)("span", {
  target: "e177kfaq1",
  label: "PrivacyWarning"
})("color:", _netlifyCmsUiDefault.colors.text, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUdrQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHlhbWwgZnJvbSAnanMteWFtbCc7XG5pbXBvcnQgeyB0cnVuY2F0ZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY29weVRvQ2xpcGJvYXJkIGZyb20gJ2NvcHktdGV4dC10by1jbGlwYm9hcmQnO1xuaW1wb3J0IHsgbG9jYWxGb3JhZ2UgfSBmcm9tICduZXRsaWZ5LWNtcy1saWItdXRpbCc7XG5pbXBvcnQgeyBidXR0b25zLCBjb2xvcnMgfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgSVNTVUVfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uZXRsaWZ5L25ldGxpZnktY21zL2lzc3Vlcy9uZXc/JztcbmNvbnN0IGdldElzc3VlVGVtcGxhdGUgPSAoeyB2ZXJzaW9uLCBwcm92aWRlciwgYnJvd3NlciwgY29uZmlnIH0pID0+IGBcbioqRGVzY3JpYmUgdGhlIGJ1ZyoqXG5cbioqVG8gUmVwcm9kdWNlKipcblxuKipFeHBlY3RlZCBiZWhhdmlvcioqXG5cbioqU2NyZWVuc2hvdHMqKlxuXG4qKkFwcGxpY2FibGUgVmVyc2lvbnM6KipcbiAtIE5ldGxpZnkgQ01TIHZlcnNpb246IFxcYCR7dmVyc2lvbn1cXGBcbiAtIEdpdCBwcm92aWRlcjogXFxgJHtwcm92aWRlcn1cXGBcbiAtIEJyb3dzZXIgdmVyc2lvbjogXFxgJHticm93c2VyfVxcYFxuXG4qKkNNUyBjb25maWd1cmF0aW9uKipcblxcYFxcYFxcYFxuJHtjb25maWd9XG5cXGBcXGBcXGBcblxuKipBZGRpdGlvbmFsIGNvbnRleHQqKlxuYDtcblxuY29uc3QgYnVpbGRJc3N1ZVRlbXBsYXRlID0gKHsgY29uZmlnIH0pID0+IHtcbiAgbGV0IHZlcnNpb24gPSAnJztcbiAgaWYgKHR5cGVvZiBORVRMSUZZX0NNU19WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgbmV0bGlmeS1jbXNAJHtORVRMSUZZX0NNU19WRVJTSU9OfWA7XG4gIH0gZWxzZSBpZiAodHlwZW9mIE5FVExJRllfQ01TX0FQUF9WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgbmV0bGlmeS1jbXMtYXBwQCR7TkVUTElGWV9DTVNfQVBQX1ZFUlNJT059YDtcbiAgfVxuICBjb25zdCB0ZW1wbGF0ZSA9IGdldElzc3VlVGVtcGxhdGUoe1xuICAgIHZlcnNpb24sXG4gICAgcHJvdmlkZXI6IGNvbmZpZy5nZXRJbihbJ2JhY2tlbmQnLCAnbmFtZSddKSxcbiAgICBicm93c2VyOiBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgIGNvbmZpZzogeWFtbC5zYWZlRHVtcChjb25maWcudG9KUygpKSxcbiAgfSk7XG5cbiAgcmV0dXJuIHRlbXBsYXRlO1xufTtcblxuY29uc3QgYnVpbGRJc3N1ZVVybCA9ICh7IHRpdGxlLCBjb25maWcgfSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBidWlsZElzc3VlVGVtcGxhdGUoeyBjb25maWcgfSk7XG5cbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgcGFyYW1zLmFwcGVuZCgndGl0bGUnLCB0cnVuY2F0ZSh0aXRsZSwgeyBsZW5ndGg6IDEwMCB9KSk7XG4gICAgcGFyYW1zLmFwcGVuZCgnYm9keScsIHRydW5jYXRlKGJvZHksIHsgbGVuZ3RoOiA0MDAwLCBvbWlzc2lvbjogJ1xcbi4uLicgfSkpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ2xhYmVscycsICd0eXBlOiBidWcnKTtcblxuICAgIHJldHVybiBgJHtJU1NVRV9VUkx9JHtwYXJhbXMudG9TdHJpbmcoKX1gO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSk7XG4gICAgcmV0dXJuIGAke0lTU1VFX1VSTH10ZW1wbGF0ZT1idWdfcmVwb3J0Lm1kYDtcbiAgfVxufTtcblxuY29uc3QgRXJyb3JCb3VuZGFyeUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDQwcHg7XG5cbiAgaDEge1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBoMiB7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICB9XG5cbiAgc3Ryb25nIHtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIH1cblxuICBociB7XG4gICAgd2lkdGg6IDIwMHB4O1xuICAgIG1hcmdpbjogMzBweCAwO1xuICAgIGJvcmRlcjogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuXG4gIGEge1xuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICB9XG5gO1xuXG5jb25zdCBQcml2YWN5V2FybmluZyA9IHN0eWxlZC5zcGFuYFxuICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG5gO1xuXG5jb25zdCBDb3B5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7YnV0dG9ucy5kZWZhdWx0fTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luOiAxMnB4IDA7XG5gO1xuXG5jb25zdCBSZWNvdmVyZWRFbnRyeSA9ICh7IGVudHJ5LCB0IH0pID0+IHtcbiAgY29uc29sZS5sb2coZW50cnkpO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aHIgLz5cbiAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5oZWFkaW5nJyl9PC9oMj5cbiAgICAgIDxzdHJvbmc+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkud2FybmluZycpfTwvc3Ryb25nPlxuICAgICAgPENvcHlCdXR0b24gb25DbGljaz17KCkgPT4gY29weVRvQ2xpcGJvYXJkKGVudHJ5KX0+XG4gICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5LmNvcHlCdXR0b25MYWJlbCcpfVxuICAgICAgPC9Db3B5QnV0dG9uPlxuICAgICAgPHByZT5cbiAgICAgICAgPGNvZGU+e2VudHJ5fTwvY29kZT5cbiAgICAgIDwvcHJlPlxuICAgIDwvPlxuICApO1xufTtcblxuY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY29uZmlnOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgaGFzRXJyb3I6IGZhbHNlLFxuICAgIGVycm9yTWVzc2FnZTogJycsXG4gICAgYmFja3VwOiAnJyxcbiAgfTtcblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgcmV0dXJuIHsgaGFzRXJyb3I6IHRydWUsIGVycm9yTWVzc2FnZTogZXJyb3IudG9TdHJpbmcoKSB9O1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0JhY2t1cCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UgIT09IG5leHRTdGF0ZS5lcnJvck1lc3NhZ2UgfHwgdGhpcy5zdGF0ZS5iYWNrdXAgIT09IG5leHRTdGF0ZS5iYWNrdXBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dCYWNrdXApIHtcbiAgICAgIGNvbnN0IGJhY2t1cCA9IGF3YWl0IGxvY2FsRm9yYWdlLmdldEl0ZW0oJ2JhY2t1cCcpO1xuICAgICAgYmFja3VwICYmIGNvbnNvbGUubG9nKGJhY2t1cCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYmFja3VwIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGhhc0Vycm9yLCBlcnJvck1lc3NhZ2UsIGJhY2t1cCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHNob3dCYWNrdXAsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFoYXNFcnJvcikge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JCb3VuZGFyeUNvbnRhaW5lcj5cbiAgICAgICAgPGgxPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnRpdGxlJyl9PC9oMT5cbiAgICAgICAgPHA+XG4gICAgICAgICAgPHNwYW4+e3QoJ3VpLmVycm9yQm91bmRhcnkuZGV0YWlscycpfTwvc3Bhbj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj17YnVpbGRJc3N1ZVVybCh7IHRpdGxlOiBlcnJvck1lc3NhZ2UsIGNvbmZpZzogdGhpcy5wcm9wcy5jb25maWcgfSl9XG4gICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAge3QoJ3VpLmVycm9yQm91bmRhcnkucmVwb3J0SXQnKX1cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAge3QoJ3VpLmVycm9yQm91bmRhcnkucHJpdmFjeVdhcm5pbmcnKVxuICAgICAgICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgICAgICAgLm1hcCgoaXRlbSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8UHJpdmFjeVdhcm5pbmcga2V5PXtpbmRleH0+e2l0ZW19PC9Qcml2YWN5V2FybmluZz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgPC9wPlxuICAgICAgICA8aHIgLz5cbiAgICAgICAgPGgyPnt0KCd1aS5lcnJvckJvdW5kYXJ5LmRldGFpbHNIZWFkaW5nJyl9PC9oMj5cbiAgICAgICAgPHA+e2Vycm9yTWVzc2FnZX08L3A+XG4gICAgICAgIHtiYWNrdXAgJiYgc2hvd0JhY2t1cCAmJiA8UmVjb3ZlcmVkRW50cnkgZW50cnk9e2JhY2t1cH0gdD17dH0gLz59XG4gICAgICA8L0Vycm9yQm91bmRhcnlDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShFcnJvckJvdW5kYXJ5KTtcbiJdfQ== */"));
const CopyButton = (0, _styledBase.default)("button", {
  target: "e177kfaq2",
  label: "CopyButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.buttons.default, ";", _netlifyCmsUiDefault.buttons.gray, ";display:block;margin:12px 0;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUdnQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHlhbWwgZnJvbSAnanMteWFtbCc7XG5pbXBvcnQgeyB0cnVuY2F0ZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY29weVRvQ2xpcGJvYXJkIGZyb20gJ2NvcHktdGV4dC10by1jbGlwYm9hcmQnO1xuaW1wb3J0IHsgbG9jYWxGb3JhZ2UgfSBmcm9tICduZXRsaWZ5LWNtcy1saWItdXRpbCc7XG5pbXBvcnQgeyBidXR0b25zLCBjb2xvcnMgfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgSVNTVUVfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uZXRsaWZ5L25ldGxpZnktY21zL2lzc3Vlcy9uZXc/JztcbmNvbnN0IGdldElzc3VlVGVtcGxhdGUgPSAoeyB2ZXJzaW9uLCBwcm92aWRlciwgYnJvd3NlciwgY29uZmlnIH0pID0+IGBcbioqRGVzY3JpYmUgdGhlIGJ1ZyoqXG5cbioqVG8gUmVwcm9kdWNlKipcblxuKipFeHBlY3RlZCBiZWhhdmlvcioqXG5cbioqU2NyZWVuc2hvdHMqKlxuXG4qKkFwcGxpY2FibGUgVmVyc2lvbnM6KipcbiAtIE5ldGxpZnkgQ01TIHZlcnNpb246IFxcYCR7dmVyc2lvbn1cXGBcbiAtIEdpdCBwcm92aWRlcjogXFxgJHtwcm92aWRlcn1cXGBcbiAtIEJyb3dzZXIgdmVyc2lvbjogXFxgJHticm93c2VyfVxcYFxuXG4qKkNNUyBjb25maWd1cmF0aW9uKipcblxcYFxcYFxcYFxuJHtjb25maWd9XG5cXGBcXGBcXGBcblxuKipBZGRpdGlvbmFsIGNvbnRleHQqKlxuYDtcblxuY29uc3QgYnVpbGRJc3N1ZVRlbXBsYXRlID0gKHsgY29uZmlnIH0pID0+IHtcbiAgbGV0IHZlcnNpb24gPSAnJztcbiAgaWYgKHR5cGVvZiBORVRMSUZZX0NNU19WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgbmV0bGlmeS1jbXNAJHtORVRMSUZZX0NNU19WRVJTSU9OfWA7XG4gIH0gZWxzZSBpZiAodHlwZW9mIE5FVExJRllfQ01TX0FQUF9WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgbmV0bGlmeS1jbXMtYXBwQCR7TkVUTElGWV9DTVNfQVBQX1ZFUlNJT059YDtcbiAgfVxuICBjb25zdCB0ZW1wbGF0ZSA9IGdldElzc3VlVGVtcGxhdGUoe1xuICAgIHZlcnNpb24sXG4gICAgcHJvdmlkZXI6IGNvbmZpZy5nZXRJbihbJ2JhY2tlbmQnLCAnbmFtZSddKSxcbiAgICBicm93c2VyOiBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgIGNvbmZpZzogeWFtbC5zYWZlRHVtcChjb25maWcudG9KUygpKSxcbiAgfSk7XG5cbiAgcmV0dXJuIHRlbXBsYXRlO1xufTtcblxuY29uc3QgYnVpbGRJc3N1ZVVybCA9ICh7IHRpdGxlLCBjb25maWcgfSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBidWlsZElzc3VlVGVtcGxhdGUoeyBjb25maWcgfSk7XG5cbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgcGFyYW1zLmFwcGVuZCgndGl0bGUnLCB0cnVuY2F0ZSh0aXRsZSwgeyBsZW5ndGg6IDEwMCB9KSk7XG4gICAgcGFyYW1zLmFwcGVuZCgnYm9keScsIHRydW5jYXRlKGJvZHksIHsgbGVuZ3RoOiA0MDAwLCBvbWlzc2lvbjogJ1xcbi4uLicgfSkpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ2xhYmVscycsICd0eXBlOiBidWcnKTtcblxuICAgIHJldHVybiBgJHtJU1NVRV9VUkx9JHtwYXJhbXMudG9TdHJpbmcoKX1gO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSk7XG4gICAgcmV0dXJuIGAke0lTU1VFX1VSTH10ZW1wbGF0ZT1idWdfcmVwb3J0Lm1kYDtcbiAgfVxufTtcblxuY29uc3QgRXJyb3JCb3VuZGFyeUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDQwcHg7XG5cbiAgaDEge1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBoMiB7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICB9XG5cbiAgc3Ryb25nIHtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIH1cblxuICBociB7XG4gICAgd2lkdGg6IDIwMHB4O1xuICAgIG1hcmdpbjogMzBweCAwO1xuICAgIGJvcmRlcjogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuXG4gIGEge1xuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICB9XG5gO1xuXG5jb25zdCBQcml2YWN5V2FybmluZyA9IHN0eWxlZC5zcGFuYFxuICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG5gO1xuXG5jb25zdCBDb3B5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7YnV0dG9ucy5kZWZhdWx0fTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luOiAxMnB4IDA7XG5gO1xuXG5jb25zdCBSZWNvdmVyZWRFbnRyeSA9ICh7IGVudHJ5LCB0IH0pID0+IHtcbiAgY29uc29sZS5sb2coZW50cnkpO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aHIgLz5cbiAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5oZWFkaW5nJyl9PC9oMj5cbiAgICAgIDxzdHJvbmc+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkud2FybmluZycpfTwvc3Ryb25nPlxuICAgICAgPENvcHlCdXR0b24gb25DbGljaz17KCkgPT4gY29weVRvQ2xpcGJvYXJkKGVudHJ5KX0+XG4gICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5LmNvcHlCdXR0b25MYWJlbCcpfVxuICAgICAgPC9Db3B5QnV0dG9uPlxuICAgICAgPHByZT5cbiAgICAgICAgPGNvZGU+e2VudHJ5fTwvY29kZT5cbiAgICAgIDwvcHJlPlxuICAgIDwvPlxuICApO1xufTtcblxuY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY29uZmlnOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgaGFzRXJyb3I6IGZhbHNlLFxuICAgIGVycm9yTWVzc2FnZTogJycsXG4gICAgYmFja3VwOiAnJyxcbiAgfTtcblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgcmV0dXJuIHsgaGFzRXJyb3I6IHRydWUsIGVycm9yTWVzc2FnZTogZXJyb3IudG9TdHJpbmcoKSB9O1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0JhY2t1cCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UgIT09IG5leHRTdGF0ZS5lcnJvck1lc3NhZ2UgfHwgdGhpcy5zdGF0ZS5iYWNrdXAgIT09IG5leHRTdGF0ZS5iYWNrdXBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dCYWNrdXApIHtcbiAgICAgIGNvbnN0IGJhY2t1cCA9IGF3YWl0IGxvY2FsRm9yYWdlLmdldEl0ZW0oJ2JhY2t1cCcpO1xuICAgICAgYmFja3VwICYmIGNvbnNvbGUubG9nKGJhY2t1cCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYmFja3VwIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGhhc0Vycm9yLCBlcnJvck1lc3NhZ2UsIGJhY2t1cCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHNob3dCYWNrdXAsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFoYXNFcnJvcikge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JCb3VuZGFyeUNvbnRhaW5lcj5cbiAgICAgICAgPGgxPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnRpdGxlJyl9PC9oMT5cbiAgICAgICAgPHA+XG4gICAgICAgICAgPHNwYW4+e3QoJ3VpLmVycm9yQm91bmRhcnkuZGV0YWlscycpfTwvc3Bhbj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj17YnVpbGRJc3N1ZVVybCh7IHRpdGxlOiBlcnJvck1lc3NhZ2UsIGNvbmZpZzogdGhpcy5wcm9wcy5jb25maWcgfSl9XG4gICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAge3QoJ3VpLmVycm9yQm91bmRhcnkucmVwb3J0SXQnKX1cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAge3QoJ3VpLmVycm9yQm91bmRhcnkucHJpdmFjeVdhcm5pbmcnKVxuICAgICAgICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgICAgICAgLm1hcCgoaXRlbSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8UHJpdmFjeVdhcm5pbmcga2V5PXtpbmRleH0+e2l0ZW19PC9Qcml2YWN5V2FybmluZz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgPC9wPlxuICAgICAgICA8aHIgLz5cbiAgICAgICAgPGgyPnt0KCd1aS5lcnJvckJvdW5kYXJ5LmRldGFpbHNIZWFkaW5nJyl9PC9oMj5cbiAgICAgICAgPHA+e2Vycm9yTWVzc2FnZX08L3A+XG4gICAgICAgIHtiYWNrdXAgJiYgc2hvd0JhY2t1cCAmJiA8UmVjb3ZlcmVkRW50cnkgZW50cnk9e2JhY2t1cH0gdD17dH0gLz59XG4gICAgICA8L0Vycm9yQm91bmRhcnlDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShFcnJvckJvdW5kYXJ5KTtcbiJdfQ== */"));

const RecoveredEntry = ({
  entry,
  t
}) => {
  console.log(entry);
  return (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)("hr", null), (0, _core.jsx)("h2", null, t('ui.errorBoundary.recoveredEntry.heading')), (0, _core.jsx)("strong", null, t('ui.errorBoundary.recoveredEntry.warning')), (0, _core.jsx)(CopyButton, {
    onClick: () => (0, _copyTextToClipboard.default)(entry)
  }, t('ui.errorBoundary.recoveredEntry.copyButtonLabel')), (0, _core.jsx)("pre", null, (0, _core.jsx)("code", null, entry)));
};

class ErrorBoundary extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      hasError: false,
      errorMessage: '',
      backup: ''
    });
  }

  static getDerivedStateFromError(error) {
    console.error(error);
    return {
      hasError: true,
      errorMessage: error.toString()
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    if (this.props.showBackup) {
      return this.state.errorMessage !== nextState.errorMessage || this.state.backup !== nextState.backup;
    }

    return true;
  }

  async componentDidUpdate() {
    if (this.props.showBackup) {
      const backup = await _netlifyCmsLibUtil.localForage.getItem('backup');
      backup && console.log(backup);
      this.setState({
        backup
      });
    }
  }

  render() {
    const {
      hasError,
      errorMessage,
      backup
    } = this.state;
    const {
      showBackup,
      t
    } = this.props;

    if (!hasError) {
      return this.props.children;
    }

    return (0, _core.jsx)(ErrorBoundaryContainer, null, (0, _core.jsx)("h1", null, t('ui.errorBoundary.title')), (0, _core.jsx)("p", null, (0, _core.jsx)("span", null, t('ui.errorBoundary.details')), (0, _core.jsx)("a", {
      href: buildIssueUrl({
        title: errorMessage,
        config: this.props.config
      }),
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('ui.errorBoundary.reportIt'))), (0, _core.jsx)("p", null, t('ui.errorBoundary.privacyWarning').split('\n').map((item, index) => (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(PrivacyWarning, {
      key: index
    }, item), (0, _core.jsx)("br", null)))), (0, _core.jsx)("hr", null), (0, _core.jsx)("h2", null, t('ui.errorBoundary.detailsHeading')), (0, _core.jsx)("p", null, errorMessage), backup && showBackup && (0, _core.jsx)(RecoveredEntry, {
      entry: backup,
      t: t
    }));
  }

}

_defineProperty(ErrorBoundary, "propTypes", {
  children: _propTypes.default.node,
  t: _propTypes.default.func.isRequired,
  config: _reactImmutableProptypes.default.map.isRequired
});

var _default = (0, _reactPolyglot.translate)()(ErrorBoundary);

exports.default = _default;